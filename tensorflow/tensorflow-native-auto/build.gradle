plugins {
    id 'maven-publish'
    id 'signing'
}

group "ai.djl.tensorflow"

boolean isRelease = project.hasProperty("release") || project.hasProperty("staging")
version = "2.3.0" + (isRelease ? "" : "-SNAPSHOT")

repositories {
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

configurations {
    download
}

dependencies {
    download "org.tensorflow:tensorflow-core-api:0.2.0-SNAPSHOT:linux-x86_64-mkl-gpu"
    download "org.tensorflow:tensorflow-core-api:0.2.0-SNAPSHOT:linux-x86_64-mkl"
    download "org.tensorflow:tensorflow-core-api:0.2.0-SNAPSHOT:macosx-x86_64-mkl"
    download "org.tensorflow:tensorflow-core-api:0.2.0-SNAPSHOT:windows-x86_64"
    download("org.bytedeco:mkl-dnn:${mkl_dnn_version}:macosx-x86_64") {
        exclude group: "org.bytedeco", module: "javacpp"
    }
    download("org.bytedeco:mkl-dnn:${mkl_dnn_version}:linux-x86_64") {
        exclude group: "org.bytedeco", module: "javacpp"
    }
    download("org.bytedeco:mkl-dnn:${mkl_dnn_version}:windows-x86_64") {
        exclude group: "org.bytedeco", module: "javacpp"
    }
}

task uploadTensorflowNativeLibs() {
    doLast {
        delete "${buildDir}/download"
        delete "${buildDir}/native"

        copy {
            from configurations.download
            into "${buildDir}/download"
        }

        fileTree("${buildDir}/download").each { f ->
            copy {
                from(zipTree(f)) {
                    exclude "**/pom.xml"
                    exclude "**/*.properties"
                    exclude "**/*.h"
                    exclude "**/*.hpp"
                    exclude "**/*.cmake"
                    exclude "META-INF/**"
                }
                into "${buildDir}/native"
                includeEmptyDirs false
            }
        }

        exec {
            commandLine "sh", "-c", "find ${buildDir}/native -type f | xargs gzip"
        }

        def tfUnzipDir = "${buildDir}/native/org/tensorflow/internal/c_api"
        def mklUnzipDir = "${buildDir}/native/org/bytedeco/mkldnn"

        ant.move(file: "${tfUnzipDir}/linux-x86_64-mkl/", toFile: "${buildDir}/native/linux/cpu/")
        ant.move(file: "${tfUnzipDir}/linux-x86_64-mkl-gpu/", toFile: "${buildDir}/native/linux/gpu/")
        ant.move(file: "${tfUnzipDir}/macosx-x86_64-mkl/", toFile: "${buildDir}/native/osx/cpu/")
        ant.move(file: "${tfUnzipDir}/windows-x86_64/", toFile: "${buildDir}/native/win/cpu/")
        //No windows gpu support for TF 2.3.0 yet
        //ant.move(file: "${tfUnzipDir}/windows-x86_64-gpu/", toFile: "${buildDir}/native/win/gpu/")

        copy {
            from "${mklUnzipDir}/linux-x86_64/"
            into "${buildDir}/native/linux/gpu/"
        }
//        copy {
//            from "${mklUnzipDir}/windows-x86_64/lib/"
//            into "${buildDir}/native/win/gpu/"
//        }

        ant.move(file: "${mklUnzipDir}/linux-x86_64/", toFile: "${buildDir}/native/linux/cpu/")
        ant.move(file: "${mklUnzipDir}/macosx-x86_64/", toFile: "${buildDir}/native/osx/cpu/")
        ant.move(file: "${mklUnzipDir}/windows-x86_64/lib", toFile: "${buildDir}/native/win/cpu")

        def f = new File("${buildDir}/native/files.txt")
        def uploadDirs = [
                "${buildDir}/native/linux/cpu/",
                "${buildDir}/native/linux/gpu/",
                "${buildDir}/native/osx/cpu/",
                "${buildDir}/native/win/cpu/",
                //"${buildDir}/native/win/gpu/"
        ]
        uploadDirs.each { item ->
            fileTree(item).files.name.each {
                def out = item - "${buildDir}/native/"
                f << out + it
                f << "\n"
            }
        }

        delete ("${buildDir}/native/org/")
        delete ("${buildDir}/native/com/")
        delete ("${buildDir}/native/google/")


        exec {
            commandLine "aws", "s3", "sync", "${buildDir}/native/", "s3://djl-ai/publish/tensorflow-${tensorflow_version}/"
        }
    }
}

jar {
    doFirst {
        def dir = file("${project.buildDir}/classes/java/main/native/lib")
        dir.mkdirs();
        def propFile = new File(dir, "tensorflow.properties")
        propFile.text = "placeholder=true\nversion=${project.version}\n"
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

project.tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

signing {
    required(project.hasProperty("staging") || project.hasProperty("snapshot"))
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

publishing.repositories {
    maven {
        if (project.hasProperty("snapshot")) {
            name = "snapshot"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        } else if (project.hasProperty("staging")) {
            name = "staging"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("ossrhUsername")
                password = findProperty("ossrhPassword")
            }
        } else {
            name = "local"
            url = "build/repo"
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = "DJL release for TensorFlow native binaries"
                description = "Deep Java Library (DJL) provided TensorFlow native library binary distribution"
                url = "http://www.djl.ai/tensorflow/${project.name}"
            }
        }
    }
}

if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
    tasks.getByName("spotbugsMain").enabled = false
}
